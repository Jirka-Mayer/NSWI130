{
  "id" : 1,
  "name" : "Name",
  "description" : "Description",
  "revision" : 0,
  "lastModifiedDate" : "2021-12-16T00:49:23Z",
  "lastModifiedAgent" : "structurizr-web/2544/diagram",
  "properties" : {
    "structurizr.dsl" : ""
  },
  "configuration" : { },
  "model" : {
    "people" : [ {
      "id" : "1",
      "tags" : "Element,Person",
      "name" : "Medical Staff",
      "relationships" : [ {
        "id" : "37",
        "tags" : "Relationship",
        "sourceId" : "1",
        "destinationId" : "4",
        "description" : "Uses PMC to manage patient health data and bed allocations"
      }, {
        "id" : "47",
        "tags" : "Relationship",
        "sourceId" : "1",
        "destinationId" : "23",
        "description" : "Uses"
      } ],
      "location" : "Unspecified"
    }, {
      "id" : "2",
      "tags" : "Element,Person",
      "name" : "Medical Support Staff",
      "relationships" : [ {
        "id" : "38",
        "tags" : "Relationship",
        "sourceId" : "2",
        "destinationId" : "4",
        "description" : "Uses PMC to register or replace medical device to hospital beds"
      }, {
        "id" : "142",
        "tags" : "Relationship",
        "sourceId" : "2",
        "destinationId" : "3",
        "description" : "Installs device to hospital bed"
      }, {
        "id" : "45",
        "tags" : "Relationship",
        "sourceId" : "2",
        "destinationId" : "12",
        "description" : "Registers or replaces medical device"
      } ],
      "location" : "Unspecified"
    } ],
    "softwareSystems" : [ {
      "id" : "36",
      "tags" : "Element,Software System",
      "name" : "OAuth Authorization Server",
      "description" : "Software System",
      "location" : "Unspecified"
    }, {
      "id" : "34",
      "tags" : "Element,Software System",
      "name" : "Drug Monitoring (DM)",
      "description" : "Software System",
      "relationships" : [ {
        "id" : "53",
        "tags" : "Relationship",
        "sourceId" : "34",
        "destinationId" : "4",
        "description" : "Allocates drugs"
      }, {
        "id" : "52",
        "tags" : "Relationship",
        "sourceId" : "34",
        "destinationId" : "26",
        "description" : "Allocates drugs"
      } ],
      "location" : "Unspecified"
    }, {
      "id" : "4",
      "tags" : "Element,Software System",
      "name" : "Patient Monitoring and Control (PMC)",
      "relationships" : [ {
        "id" : "42",
        "tags" : "Relationship",
        "sourceId" : "4",
        "destinationId" : "3",
        "description" : "Pulls medical data"
      }, {
        "id" : "40",
        "tags" : "Relationship",
        "sourceId" : "4",
        "destinationId" : "36",
        "description" : "Uses OAuth to authorize medical and technical staff"
      }, {
        "id" : "44",
        "tags" : "Relationship",
        "sourceId" : "4",
        "destinationId" : "2",
        "description" : "Reports device malfunctions"
      }, {
        "id" : "61",
        "tags" : "Relationship",
        "sourceId" : "4",
        "destinationId" : "35",
        "description" : "Fetches patients data"
      }, {
        "id" : "39",
        "tags" : "Relationship",
        "sourceId" : "4",
        "destinationId" : "34",
        "description" : "Uses DM to monitor drug usage"
      } ],
      "location" : "Unspecified",
      "containers" : [ {
        "id" : "26",
        "tags" : "Element,Container",
        "name" : "Drugs Usage Web API",
        "description" : "Allocates drugs and reports depletion of drugs",
        "relationships" : [ {
          "id" : "51",
          "tags" : "Relationship",
          "sourceId" : "26",
          "destinationId" : "34",
          "description" : "Reports drugs depletion"
        }, {
          "id" : "54",
          "tags" : "Relationship",
          "sourceId" : "26",
          "destinationId" : "32",
          "description" : "Uses"
        } ],
        "group" : "Drugs Usage",
        "technology" : "Java Spring Boot",
        "components" : [ {
          "id" : "28",
          "tags" : "Element,Component",
          "name" : "Drug Catalog Manager",
          "description" : "Implements logic related to querying drug information",
          "relationships" : [ {
            "id" : "98",
            "tags" : "Relationship",
            "sourceId" : "28",
            "destinationId" : "34",
            "description" : "Makes API call to"
          } ],
          "size" : 0
        }, {
          "id" : "30",
          "tags" : "Element,Component",
          "name" : "Drug Management",
          "description" : "Manages drug needs",
          "relationships" : [ {
            "id" : "102",
            "tags" : "Relationship",
            "sourceId" : "30",
            "destinationId" : "27",
            "description" : "Requests drug delivery"
          }, {
            "id" : "100",
            "tags" : "Relationship",
            "sourceId" : "30",
            "destinationId" : "31",
            "description" : "Stores drug prescriptions and local storage"
          } ],
          "size" : 0
        }, {
          "id" : "31",
          "tags" : "Element,Component",
          "name" : "Persistance layer",
          "relationships" : [ {
            "id" : "101",
            "tags" : "Relationship",
            "sourceId" : "31",
            "destinationId" : "32",
            "description" : "Uses to persist data"
          } ],
          "size" : 0
        }, {
          "id" : "27",
          "tags" : "Element,Component",
          "name" : "Drug Delivery Manager",
          "description" : "Implements logic related to requesting drug delivery",
          "relationships" : [ {
            "id" : "103",
            "tags" : "Relationship",
            "sourceId" : "27",
            "destinationId" : "34",
            "description" : "Makes API call to"
          } ],
          "size" : 0
        }, {
          "id" : "29",
          "tags" : "Element,Component",
          "name" : "Drug Controller",
          "description" : "Endpoint for drug management and info",
          "relationships" : [ {
            "id" : "97",
            "tags" : "Relationship",
            "sourceId" : "29",
            "destinationId" : "28",
            "description" : "Relays queries about drug information"
          }, {
            "id" : "99",
            "tags" : "Relationship",
            "sourceId" : "29",
            "destinationId" : "30",
            "description" : "Relays info about drug prescriptions"
          } ],
          "size" : 0
        } ]
      }, {
        "id" : "25",
        "tags" : "Element,Container",
        "name" : "PMC Data Secondary Storage",
        "description" : "Persists medical devices configurations",
        "group" : "Patient Monitoring and Control",
        "technology" : "Relational DB"
      }, {
        "id" : "15",
        "tags" : "Element,Container",
        "name" : "PMC Server",
        "description" : "Manages allocation of patients, gathering monitoring data and drugs usage",
        "relationships" : [ {
          "id" : "86",
          "tags" : "Relationship",
          "sourceId" : "15",
          "destinationId" : "6",
          "description" : "Makes API calls to",
          "technology" : "JSON/HTTPS"
        }, {
          "id" : "48",
          "tags" : "Relationship",
          "sourceId" : "15",
          "destinationId" : "36",
          "description" : "Authorizes medical staff"
        }, {
          "id" : "55",
          "tags" : "Relationship",
          "sourceId" : "15",
          "destinationId" : "24",
          "description" : "Uses"
        }, {
          "id" : "59",
          "tags" : "Relationship",
          "sourceId" : "15",
          "destinationId" : "26",
          "description" : "Request allocation of drugs to patient"
        }, {
          "id" : "60",
          "tags" : "Relationship",
          "sourceId" : "15",
          "destinationId" : "35",
          "description" : "Fetches patients data"
        }, {
          "id" : "71",
          "tags" : "Relationship",
          "sourceId" : "15",
          "destinationId" : "29",
          "description" : "Fetches data to persist from"
        }, {
          "id" : "50",
          "tags" : "Relationship",
          "sourceId" : "15",
          "destinationId" : "5",
          "description" : "Queries data from medical devices"
        } ],
        "group" : "Patient Monitoring and Control",
        "technology" : "Java Spring Boot",
        "components" : [ {
          "id" : "22",
          "tags" : "Element,Component",
          "name" : "Persistance Layer",
          "description" : "Provides data mapping (in the form of many ORM classes) to the storage",
          "relationships" : [ {
            "id" : "85",
            "tags" : "Relationship",
            "sourceId" : "22",
            "destinationId" : "24",
            "description" : "Reads data from, writes data to"
          } ],
          "size" : 0
        }, {
          "id" : "18",
          "tags" : "Element,Component",
          "name" : "New-patient detector",
          "description" : "implements the logic behind detecting new patients",
          "relationships" : [ {
            "id" : "63",
            "tags" : "Relationship",
            "sourceId" : "18",
            "destinationId" : "35",
            "description" : "Queries"
          } ],
          "size" : 0
        }, {
          "id" : "19",
          "tags" : "Element,Component",
          "name" : "Patient History Controller",
          "description" : "implements the logic related to getting and persisting patient's history",
          "relationships" : [ {
            "id" : "70",
            "tags" : "Relationship",
            "sourceId" : "19",
            "destinationId" : "26",
            "description" : "Fetches data to persist from"
          }, {
            "id" : "69",
            "tags" : "Relationship",
            "sourceId" : "19",
            "destinationId" : "29",
            "description" : "Fetches data to persist from"
          }, {
            "id" : "84",
            "tags" : "Relationship",
            "sourceId" : "19",
            "destinationId" : "22",
            "description" : "Uses to persist data from",
            "technology" : "various ORMs related to controllers"
          }, {
            "id" : "73",
            "tags" : "Relationship",
            "sourceId" : "19",
            "destinationId" : "22",
            "description" : "Uses to access patient history data"
          }, {
            "id" : "80",
            "tags" : "Relationship",
            "sourceId" : "19",
            "destinationId" : "36",
            "description" : "Uses to authorize requests"
          } ],
          "size" : 0
        }, {
          "id" : "20",
          "tags" : "Element,Component",
          "name" : "Drug Controller",
          "description" : "implements the logic related to getting patient's drug data",
          "relationships" : [ {
            "id" : "75",
            "tags" : "Relationship",
            "sourceId" : "20",
            "destinationId" : "29",
            "description" : "Uses to access patient-drug data"
          }, {
            "id" : "76",
            "tags" : "Relationship",
            "sourceId" : "20",
            "destinationId" : "26",
            "description" : "Uses to access patient-drug data"
          }, {
            "id" : "78",
            "tags" : "Relationship",
            "sourceId" : "20",
            "destinationId" : "36",
            "description" : "Uses to authorize requests"
          } ],
          "size" : 0
        }, {
          "id" : "16",
          "tags" : "Element,Component",
          "name" : "Patient Location Controller",
          "description" : "implements the logic related to getting and setting the location of a patient",
          "relationships" : [ {
            "id" : "64",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "18",
            "description" : "Querries for new patients"
          }, {
            "id" : "81",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "36",
            "description" : "Uses to authorize requests"
          }, {
            "id" : "62",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "22",
            "description" : "Uses to access patient location data"
          }, {
            "id" : "67",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "17",
            "description" : "Writes changes in hospital bed availiability",
            "technology" : "JSON/HTTP"
          }, {
            "id" : "140",
            "tags" : "Relationship",
            "sourceId" : "16",
            "destinationId" : "19",
            "description" : "If an old patient was overwritten, trigger patient history persistance for overwritten patient"
          } ],
          "size" : 0
        }, {
          "id" : "21",
          "tags" : "Element,Component",
          "name" : "Patient Condition Controller",
          "description" : "implements the logic related to getting patient's current condition",
          "relationships" : [ {
            "id" : "83",
            "tags" : "Relationship",
            "sourceId" : "21",
            "destinationId" : "22",
            "description" : "Uses to persists/access sensor data (during a single hospitalization)"
          }, {
            "id" : "79",
            "tags" : "Relationship",
            "sourceId" : "21",
            "destinationId" : "36",
            "description" : "Uses to authorize requests"
          }, {
            "id" : "82",
            "tags" : "Relationship",
            "sourceId" : "21",
            "destinationId" : "5",
            "description" : "Queries sensor data from"
          }, {
            "id" : "141",
            "tags" : "Relationship",
            "sourceId" : "21",
            "destinationId" : "6",
            "description" : "Requests sensor data related to patient's bed"
          } ],
          "size" : 0
        }, {
          "id" : "17",
          "tags" : "Element,Component",
          "name" : "Hospital Bed Controller",
          "description" : "implements the logic related to getting and setting the hospital bed availability",
          "relationships" : [ {
            "id" : "66",
            "tags" : "Relationship",
            "sourceId" : "17",
            "destinationId" : "16",
            "description" : "Provides data bout available hospital beds",
            "technology" : "JSON/HTTP"
          }, {
            "id" : "68",
            "tags" : "Relationship",
            "sourceId" : "17",
            "destinationId" : "22",
            "description" : "Uses to access hospital bed availability data",
            "technology" : "JSON/HTTP"
          } ],
          "size" : 0
        } ]
      }, {
        "id" : "14",
        "tags" : "Element,Container",
        "name" : "Devices Data Secondary Storage",
        "description" : "Persists medical devices configurations",
        "group" : "Medical Devices Management",
        "technology" : "Relational DB"
      }, {
        "id" : "12",
        "tags" : "Element,Container,webApp",
        "name" : "Devices Web App",
        "description" : "Provides UI to manage and allocate medical devices",
        "relationships" : [ {
          "id" : "94",
          "tags" : "Relationship",
          "sourceId" : "12",
          "destinationId" : "7",
          "description" : "Makes call to"
        }, {
          "id" : "93",
          "tags" : "Relationship",
          "sourceId" : "12",
          "destinationId" : "6",
          "description" : "Makes call to"
        }, {
          "id" : "58",
          "tags" : "Relationship",
          "sourceId" : "12",
          "destinationId" : "5",
          "description" : "Uses"
        } ],
        "group" : "Medical Devices Management",
        "technology" : "React TS"
      }, {
        "id" : "33",
        "tags" : "Element,Container",
        "name" : "Drugs Usage Data Secondary Storage",
        "description" : "Stores available drugs allocation (balance)",
        "group" : "Drugs Usage",
        "technology" : "Relational DB"
      }, {
        "id" : "23",
        "tags" : "Element,Container,webApp",
        "name" : "PMC Web App",
        "description" : "Allows to manage patient' allocation, view monitoring data and set records of drug usage",
        "relationships" : [ {
          "id" : "72",
          "tags" : "Relationship",
          "sourceId" : "23",
          "destinationId" : "19",
          "description" : "Makes API calls to get patient history",
          "technology" : "JSON/HTTP"
        }, {
          "id" : "74",
          "tags" : "Relationship",
          "sourceId" : "23",
          "destinationId" : "20",
          "description" : "Makes API calls to get patient's drug usage data",
          "technology" : "JSON/HTTP"
        }, {
          "id" : "57",
          "tags" : "Relationship",
          "sourceId" : "23",
          "destinationId" : "15",
          "description" : "Uses"
        }, {
          "id" : "77",
          "tags" : "Relationship",
          "sourceId" : "23",
          "destinationId" : "21",
          "description" : "Makes API calls to get patient's current condition",
          "technology" : "JSON/HTTP"
        }, {
          "id" : "65",
          "tags" : "Relationship",
          "sourceId" : "23",
          "destinationId" : "16",
          "description" : "Makes API calls to get/assign patients' locations",
          "technology" : "JSON/HTTP"
        } ],
        "group" : "Patient Monitoring and Control",
        "technology" : "React TS"
      }, {
        "id" : "5",
        "tags" : "Element,Container",
        "name" : "Devices Web API",
        "description" : "Manages medical devices, resolves communication differences of devices as adapter",
        "relationships" : [ {
          "id" : "41",
          "tags" : "Relationship",
          "sourceId" : "5",
          "destinationId" : "3",
          "description" : "Pulls medical data"
        }, {
          "id" : "46",
          "tags" : "Relationship",
          "sourceId" : "5",
          "destinationId" : "36",
          "description" : "Authorizes medical support staff"
        }, {
          "id" : "49",
          "tags" : "Relationship",
          "sourceId" : "5",
          "destinationId" : "15",
          "description" : "Requests beds data from PMC, sends new device's allocation device to PMC"
        }, {
          "id" : "56",
          "tags" : "Relationship",
          "sourceId" : "5",
          "destinationId" : "13",
          "description" : "Uses"
        }, {
          "id" : "43",
          "tags" : "Relationship",
          "sourceId" : "5",
          "destinationId" : "2",
          "description" : "Reports device malfunctions"
        } ],
        "group" : "Medical Devices Management",
        "technology" : "Java Spring Boot",
        "components" : [ {
          "id" : "11",
          "tags" : "Element,Component",
          "name" : "Devices Adapter",
          "description" : "Adapters for different APIs of devices",
          "relationships" : [ {
            "id" : "91",
            "tags" : "Relationship",
            "sourceId" : "11",
            "destinationId" : "3",
            "description" : "Makes call to unique API",
            "technology" : "Protocols depend on device spec"
          } ],
          "size" : 0
        }, {
          "id" : "8",
          "tags" : "Element,Component",
          "name" : "Devices Management",
          "description" : "Implementation logic of devices application",
          "relationships" : [ {
            "id" : "88",
            "tags" : "Relationship",
            "sourceId" : "8",
            "destinationId" : "9",
            "description" : "Stores devices data and metadata"
          }, {
            "id" : "89",
            "tags" : "Relationship",
            "sourceId" : "8",
            "destinationId" : "11",
            "description" : "Retrieves devices data using adapter"
          }, {
            "id" : "90",
            "tags" : "Relationship",
            "sourceId" : "8",
            "destinationId" : "10",
            "description" : "Reports device's fault/failure to external services"
          } ],
          "size" : 0
        }, {
          "id" : "6",
          "tags" : "Element,Component",
          "name" : "Devices Data Controller",
          "description" : "Endpoints to get device data",
          "relationships" : [ {
            "id" : "87",
            "tags" : "Relationship",
            "sourceId" : "6",
            "destinationId" : "8",
            "description" : "Gets devices data processed by application logic"
          } ],
          "size" : 0
        }, {
          "id" : "9",
          "tags" : "Element,Component",
          "name" : "Devices Persistence",
          "description" : "DB operations ORMs",
          "relationships" : [ {
            "id" : "95",
            "tags" : "Relationship",
            "sourceId" : "9",
            "destinationId" : "13",
            "description" : "Uses ORM to persist data"
          } ],
          "size" : 0
        }, {
          "id" : "7",
          "tags" : "Element,Component",
          "name" : "Devices Registration Controller",
          "description" : "Endpoints to (de)register devices",
          "relationships" : [ {
            "id" : "92",
            "tags" : "Relationship",
            "sourceId" : "7",
            "destinationId" : "8",
            "description" : "(De)registers devices"
          } ],
          "size" : 0
        }, {
          "id" : "10",
          "tags" : "Element,Component",
          "name" : "Devices Notifications",
          "description" : "Sends e-mail / sms notification to users",
          "relationships" : [ {
            "id" : "96",
            "tags" : "Relationship",
            "sourceId" : "10",
            "destinationId" : "2",
            "description" : "Reports device's fault/failure to"
          } ],
          "size" : 0
        } ]
      }, {
        "id" : "13",
        "tags" : "Element,Container",
        "name" : "Devices Data Storage",
        "description" : "Persists medical devices configurations",
        "group" : "Medical Devices Management",
        "technology" : "Relational DB"
      }, {
        "id" : "32",
        "tags" : "Element,Container",
        "name" : "Drugs Usage Data Storage",
        "description" : "Stores available drugs allocation (balance)",
        "group" : "Drugs Usage",
        "technology" : "Relational DB"
      }, {
        "id" : "24",
        "tags" : "Element,Container",
        "name" : "PMC Data Storage",
        "description" : "Persists patient history, allocation of devices to beds, available beds configuration",
        "group" : "Patient Monitoring and Control",
        "technology" : "Relational DB"
      } ]
    }, {
      "id" : "3",
      "tags" : "Element,Software System,Specific type of medical device containing health sensors",
      "name" : "Medical Device",
      "description" : "Hardware",
      "location" : "Unspecified"
    }, {
      "id" : "35",
      "tags" : "Element,Software System",
      "name" : "Patient registry",
      "description" : "Software System",
      "location" : "Unspecified"
    } ],
    "deploymentNodes" : [ {
      "id" : "104",
      "tags" : "Element,Deployment Node",
      "name" : "Technical User's Workstation",
      "environment" : "Production",
      "technology" : "Microsoft Windows 10",
      "instances" : 1,
      "children" : [ {
        "id" : "105",
        "tags" : "Element,Deployment Node",
        "name" : "Web Browser",
        "environment" : "Production",
        "technology" : "Chrome, Firefox, Safari, or Edge",
        "instances" : 1,
        "containerInstances" : [ {
          "id" : "106",
          "tags" : "Container Instance",
          "relationships" : [ {
            "id" : "119",
            "sourceId" : "106",
            "destinationId" : "118",
            "description" : "Uses",
            "linkedRelationshipId" : "58"
          } ],
          "environment" : "Production",
          "deploymentGroups" : [ "Default" ],
          "instanceId" : 1,
          "containerId" : "12"
        } ]
      } ]
    }, {
      "id" : "110",
      "tags" : "Element,Deployment Node",
      "name" : "On-premises Datacenter",
      "environment" : "Production",
      "instances" : 1,
      "children" : [ {
        "id" : "111",
        "tags" : "Element,Deployment Node",
        "name" : "k8-med-apps.[base-intranet-url]",
        "environment" : "Production",
        "technology" : "Ubuntu 18.04 LTS",
        "instances" : 1,
        "children" : [ {
          "id" : "116",
          "tags" : "Element,Deployment Node",
          "name" : "Container #2",
          "environment" : "Production",
          "technology" : "Docker",
          "instances" : 1,
          "children" : [ {
            "id" : "117",
            "tags" : "Element,Deployment Node",
            "name" : "devices.pmc.[base-intranet-url]",
            "environment" : "Production",
            "technology" : "Apache Tomcat 8.x",
            "instances" : 1,
            "containerInstances" : [ {
              "id" : "118",
              "tags" : "Container Instance",
              "relationships" : [ {
                "id" : "120",
                "sourceId" : "118",
                "destinationId" : "114",
                "description" : "Requests beds data from PMC, sends new device's allocation device to PMC",
                "linkedRelationshipId" : "49"
              }, {
                "id" : "129",
                "sourceId" : "118",
                "destinationId" : "128",
                "description" : "Uses",
                "linkedRelationshipId" : "56"
              } ],
              "environment" : "Production",
              "deploymentGroups" : [ "Default" ],
              "instanceId" : 1,
              "containerId" : "5"
            } ]
          } ]
        }, {
          "id" : "122",
          "tags" : "Element,Deployment Node",
          "name" : "Container #3",
          "environment" : "Production",
          "technology" : "Docker",
          "instances" : 1,
          "children" : [ {
            "id" : "123",
            "tags" : "Element,Deployment Node",
            "name" : "drug-usage.pmc.[base-intranet-url]",
            "environment" : "Production",
            "technology" : "Apache Tomcat 8.x",
            "instances" : 1,
            "containerInstances" : [ {
              "id" : "124",
              "tags" : "Container Instance",
              "relationships" : [ {
                "id" : "131",
                "sourceId" : "124",
                "destinationId" : "130",
                "description" : "Uses",
                "linkedRelationshipId" : "54"
              } ],
              "environment" : "Production",
              "deploymentGroups" : [ "Default" ],
              "instanceId" : 1,
              "containerId" : "26"
            } ]
          } ]
        }, {
          "id" : "112",
          "tags" : "Element,Deployment Node",
          "name" : "Container #1",
          "environment" : "Production",
          "technology" : "Docker",
          "instances" : 1,
          "children" : [ {
            "id" : "113",
            "tags" : "Element,Deployment Node",
            "name" : "app.pmc.[base-intranet-url]",
            "environment" : "Production",
            "technology" : "Apache Tomcat 8.x",
            "instances" : 1,
            "containerInstances" : [ {
              "id" : "114",
              "tags" : "Container Instance",
              "relationships" : [ {
                "id" : "133",
                "sourceId" : "114",
                "destinationId" : "132",
                "description" : "Uses",
                "linkedRelationshipId" : "55"
              }, {
                "id" : "121",
                "sourceId" : "114",
                "destinationId" : "118",
                "description" : "Queries data from medical devices",
                "linkedRelationshipId" : "50"
              }, {
                "id" : "125",
                "sourceId" : "114",
                "destinationId" : "124",
                "description" : "Request allocation of drugs to patient",
                "linkedRelationshipId" : "59"
              } ],
              "environment" : "Production",
              "deploymentGroups" : [ "Default" ],
              "instanceId" : 1,
              "containerId" : "15"
            } ]
          } ]
        } ]
      }, {
        "id" : "126",
        "tags" : "Element,Deployment Node",
        "name" : "med-db01.[base-intranet-url]",
        "environment" : "Production",
        "technology" : "Ubuntu 18.04 LTS",
        "instances" : 1,
        "children" : [ {
          "id" : "127",
          "tags" : "Element,Deployment Node",
          "name" : "Oracle - Primary",
          "relationships" : [ {
            "id" : "139",
            "tags" : "Relationship",
            "sourceId" : "127",
            "destinationId" : "135",
            "description" : "Replicates data to"
          } ],
          "environment" : "Production",
          "technology" : "Oracle 19c",
          "instances" : 1,
          "containerInstances" : [ {
            "id" : "132",
            "tags" : "Container Instance",
            "environment" : "Production",
            "deploymentGroups" : [ "Default" ],
            "instanceId" : 1,
            "containerId" : "24"
          }, {
            "id" : "130",
            "tags" : "Container Instance",
            "environment" : "Production",
            "deploymentGroups" : [ "Default" ],
            "instanceId" : 1,
            "containerId" : "32"
          }, {
            "id" : "128",
            "tags" : "Container Instance",
            "environment" : "Production",
            "deploymentGroups" : [ "Default" ],
            "instanceId" : 1,
            "containerId" : "13"
          } ]
        } ]
      }, {
        "id" : "134",
        "tags" : "Element,Deployment Node,Failover",
        "name" : "med-db03.[base-intranet-url]",
        "environment" : "Production",
        "technology" : "Ubuntu 18.04 LTS",
        "instances" : 1,
        "children" : [ {
          "id" : "135",
          "tags" : "Element,Deployment Node,Failover",
          "name" : "Oracle - Secondary",
          "environment" : "Production",
          "technology" : "Oracle 19c",
          "instances" : 1,
          "containerInstances" : [ {
            "id" : "138",
            "tags" : "Container Instance",
            "environment" : "Production",
            "deploymentGroups" : [ "Default" ],
            "instanceId" : 1,
            "containerId" : "25"
          }, {
            "id" : "136",
            "tags" : "Container Instance",
            "environment" : "Production",
            "deploymentGroups" : [ "Default" ],
            "instanceId" : 1,
            "containerId" : "14"
          }, {
            "id" : "137",
            "tags" : "Container Instance",
            "environment" : "Production",
            "deploymentGroups" : [ "Default" ],
            "instanceId" : 1,
            "containerId" : "33"
          } ]
        } ]
      } ]
    }, {
      "id" : "107",
      "tags" : "Element,Deployment Node",
      "name" : "Medical Staff's Workstation",
      "environment" : "Production",
      "technology" : "Microsoft Windows 10",
      "instances" : 1,
      "children" : [ {
        "id" : "108",
        "tags" : "Element,Deployment Node",
        "name" : "Web Browser",
        "environment" : "Production",
        "technology" : "Chrome, Firefox, Safari, or Edge",
        "instances" : 1,
        "containerInstances" : [ {
          "id" : "109",
          "tags" : "Container Instance",
          "relationships" : [ {
            "id" : "115",
            "sourceId" : "109",
            "destinationId" : "114",
            "description" : "Uses",
            "linkedRelationshipId" : "57"
          } ],
          "environment" : "Production",
          "deploymentGroups" : [ "Default" ],
          "instanceId" : 1,
          "containerId" : "23"
        } ]
      } ]
    } ]
  },
  "documentation" : {
    "sections" : [ {
      "elementId" : "4",
      "title" : "Development Documentation",
      "order" : 2,
      "format" : "Markdown",
      "content" : "\r\n## Development Documentation\r\n\r\nFollowing sections contains further technical details for each application in PMC software system.\r\n\r\n#### Note on terminology\r\nFor clarity, in the PMC Core Application Container, there are only **Controller components** which, however, encompass both public (pre-generated, Swagger-like) web API **and business logic**. In other components the Controller's role is to provide only the public API and redirect requests to business-logic-related components.\r\n\r\nIn the entirety of the documentation, whenever you see a **persistence layer**, keep in mind that this component includes both the collection of **data models** for individual business logic components and separated & flexible **means of communication with the underlying database** system. \r\n\r\n### PMC Core Application\r\n\r\nThe main purpose of the PMC Core Application is to bring the whole system together by connecting all the other parts and provide the system's services to users (except for the medical support staff, that should use the *Devices Application* instead). It also directly handles patients' history and the allocation of hospital beds.\r\n\r\n![](embed:Level_3_central)\r\n\r\nLooking at the diagram horizontally, you may see that the server is composed mainly of two different layers - *Controllers* and the *Persistence Layer*. The web application communicates with the controllers (their API), which contain the business logic and store or retrieve data through the persistence layer (see [Note on terminology](#1.2.1)).\r\n\r\nVertically though, the diagram is divided into four separate units, each handling a different set of tasks the PMC Server needs to carry out. These tasks are primarily the prescription of drugs, managing patients' history, the allocation of beds to patients and monitoring the patients' condition.\r\n\r\n#### New-patient detector\r\n\r\nIn order to notify users of the application (the medical personnel) that a new patient does not have a bed allocated to them, the list of new patients is needed. The *New-patient detector* component is used to obtain this list using the *Patient registry*. It expects that the *Patient registry* provides data that are sufficient to determine this information.\r\n\r\n#### Patient Condition Controller\r\n\r\nShort history records about a patient's condition (the results measured by devices at a particular bed) are stored within the *Devices Application*. The *Patient Condition Controller* fetches them periodically and ensures the data about the current hospitalization are available in the *Persistence Layer* of the *PMC Server*.\r\n\r\n#### Patient History Controller\r\n\r\nAll the other controllers in the *PMC Server* use models concerning the current hospitalization of patients. When a patient leaves the hospital, the *Patient History Controller* takes all the data collected during the hospitalization and stores them via the *Persistence Layer*.\r\n\r\n#### Related workflows\r\n\r\nIn this workflow, we provide a detailed look at how new patients are discovered and displayed to the user. [New-patient detector](#2.1.1) provides only a list of new patients. It is up to the Patient Location Controller to filter only those, who don't have a bed assigned yet and respond to the frontend's request with the correct list. \r\n\r\n![](embed:PatientDiscoveryWorkflow)\r\n\r\nIn this workflow, we provide a detailed look at how patients are assigned to a bed. Patient location controller verifies if such change can be done and writes the change via the persistence layer. In the case another patient (who has departed) already occupied the same bed as requested, that patient's data is requested to be moved to history data models via the patient history controller.\r\n\r\n![](embed:AddPatientWorkflow)\r\n\r\n\r\n### Devices Application\r\n\r\nDevices application handles management and communication with medical devices. Devices Web API makes requests to devices on behalf of another services. Devices Web App allows medical support staff to manage medical devices.\r\n\r\n![](embed:Level_3_devices)\r\n\r\n#### Devices Web App\r\n\r\nDevices Web App allows medical support staff to register, move and unregister devices to hospital beds. In case of a device malfunction, users can see latest communication with the device.\r\n\r\n#### Devices Web API\r\n\r\nDevices Web API solves problems regarding non-uniformity in communication with medical devices -- each device is possibly communicating via different communication protocol and provides data in different data formats. Consumers of Devices Web API uses REST/Json API which returns device data in unified device model, with provided schemas for each device type. Consumers can request data from all devices registered under bed which ID is provided in request.\r\n\r\nThe differences are internally managed by adapters registered for each device type. When API receives a request to pull data from device, the request is delegated to device's adapter which directly contacts the device and converts device's response to unified data model of device data. The model is then serialized to JSON available to consumers of the API. When system needs to communicate with new type of devices (e.g. new type of temperature sensors), new adapter needs to be developed.\r\n\r\n#### Managing Devices\r\n\r\nDevices Web API application handles most of the implementation logic in component Devices Management, containing core logic for devices management and communication. Each Spring Boot controller executes granular steps defined in this Devices Management controller. Metadata, such as device configuration and their allocations to beds, are stored in the persistent storage. The communication with persistent storage is managed by persistance layer, which contains definitions of ORM data model used by application's internal logic. Devices Management stores latest requests activity for diagnostics.\r\n\r\n#### Handling Device Malfunctions\r\n\r\nWhen adapter fails to communicate with device or device returns invalid state, Devices Management component receives error based on type of failure. Devices Management stores error in communication under latest requests for the device and contacts Devices Notifications component to inform users via email and notification is sent to Slack application.\r\n\r\n![](embed:DeviceFailureWorkflow)\r\n\r\n\r\n#### Related Workflows\r\n\r\nThis workflow describes how the real-time *patient's condition* is checked and communicated by and within the system. This diagram requires you to know the workings of the [PMC Core Application](#2.1), be sure to read through that section first. After the frontend's request, the PMC core application requests data from [Devices Web API](#2.2.2) which sees the request though and returns data in a unified format as described in [it's documentation section and the following sections.](#2.2.2) \r\n\r\n![](embed:PatientConditionCheckWorkflow)\r\n\r\n### Drugs Application\r\n\r\nTakes care of all drug related problems and communications with *Drug Monitoring*.\r\n\r\nAll actions are taken as responses to requests from *PMC Server*, there is no active local loop.\r\n\r\nPossible requests from *PMC Server* are:\r\n- drug information query from drug catalog\r\n- change of patient's prescriptions\r\n- notification of used drugs\r\n\r\n![](embed:Level_3_drugs)\r\n\r\n#### Drug Controller\r\n\r\nInterface to be accessed by *PMC Server*, simply relays requests translated into local format of *Drug Application*.\r\n\r\n#### Drug Delivery Manager\r\n\r\nInterface accessing *Drug Monitoring* to request delivery of needed drugs and to report consumed drug packages.\r\n\r\n#### Drug Catalog Manager\r\n\r\nQueries drug information from *Drug Monitoring*. It is separated from core of *Drugs Application*, because this feature is completely orthogonal. Rest of *Drug Application* can work purely with drug ID and *Catalog Manager* does not need any drug storage or prescription information or any kind of local persistent storage. Furthermore, conceptually it is not even necessary to use *Drug Monitoring* and rather directly access some kind of national drug catalog.\r\n\r\n#### Drug Management\r\n\r\nMain logic of *Drugs Application*, handles patients' prescriptions and local drug storage. Based on those it communicates through *Drug Delivery Management* to request reasonable amount of drugs for near future.\r\n\r\n#### Related Workflows\r\n\r\nThe following workflow diagram elaborates on how drugs are prescribed to a patient. You can read about the [simplified version](#1.4.2) in a previous section. Notice that drug prescriptions are stored within the [Drugs Application](#2.3) and a request of a new delivery may be sent to the *Drug Monitoring* system in case the prescribed drugs are not available.\r\n\r\n![](embed:DrugsManagementWorkflow)\r\n\r\n### Deployment\r\n\r\nTo comply with safety requirements, deployments are being accessible only in hospital intranet (in diagrams denoted as base-intranet-url). As a microservices architecture, each application in PMC software system is deployed independently on another application as a single service.\r\n\r\n#### Application deployment\r\n\r\nApplications are managed by Kubernetes in k8-med-apps instance, each application running in own docker container. Applications scaling can be allowed by requesting DevOps managing k8-med-apps server. Users access Devices application under devices.pmc and PMC application under app.pmc in hospital's intranet.\r\n\r\n#### Storage deployment\r\n\r\nEach application uses its own database in Primary Oracle instance on med-db01 database server. To comply with regulations, storage is replicated to secondary storage on med-db03 database server.\r\n\r\n![](embed:Prod)\r\n"
    }, {
      "elementId" : "4",
      "title" : "Quality attributes",
      "order" : 3,
      "format" : "Markdown",
      "content" : "## Quality attributes\r\n\r\n\r\n### Performance\r\n\r\n#### Performance requirement scenarios\r\n\r\n>  *Patient Condition Controller* of *PMC server* periodically fetches medical device data for long-term storage\r\n\r\n- **Source:** *PMC server* container\r\n- **Stimulus:** Periodic read of device information from every device (~5000) every 30 seconds\r\n- **Artifact:** *Device web API* container\r\n- **Environment:** Normal operations\r\n- **Response:** All fetch request processed\r\n- **Measure:** With latency no larger than 30 seconds\r\n\r\nSince *medical devices* are independent of each other we can read in parallel from them with multiple *Device web API*. We would need a new controller to keep track of registered devices, remove them from individual web APIs and keep the number of device handled by individual web APIs balanced\r\n\r\n> Medical staff request patient medical data\r\n\r\n- **Source:** *Medical staff*\r\n- **Stimulus:** Sporadically checks patients medical data during the entire day\r\n- **Artifact:** *PMC Server* container\r\n- **Environment:** Normal operation\r\n- **Response:** All requests processed\r\n- **Measure:** With average latency of 1 seconds\r\n\r\nThis scenario presents a standard operation of the software system and the system should be able to accomodate such requests. The requests, while sporadic, will mostly be sparse. No alteration to the system is thus needed\r\n\r\n### Usability\r\n\r\nThe system provides various functionalities. Every one of them supports different kinds of tasks. The system is mainly used for *reading* acquired data, but\r\nsome parts can be changed while interacting with the user.\r\n\r\nMain use cases are:\r\n- **Assignment of new patients to beds** \r\n- **Viewing bed distribution among patients** \r\n- **Viewing patient's condition** \r\n- **Viewing and assigning drug usage** \r\n- **Device management** Reading data acquired from devices connected to patient's bed (reading patient's condition if working properly, otherwise reporting to Medical support staff). Installing and setting the devices to a different bed.\r\n\r\n**Learning system features**\r\n\r\nThe system should be intuitive and easy to use for everyday use in the hospital. Every task should be done swiftly and without big delays. Every person in the hospital should be learning how to use only the part of the system they will be actively using. Therefore there is no need for doctors to learn how to use Device Management App and for Medical Support Staff there is no need to learn how to order drugs or prescribe drugs to a speific patient or how to allocate the patients to the hospital beds.\r\n\r\n**Using system efficiently**\r\n\r\nTo be able to use the system efficiently, it should be intuitive, clearly organised and allowing the aggregation of data while reading or changing them. User initiative support should be implemented in order to ease the use of the system. Features of User Initiative Support is described further below.\r\n\r\n**Minimizing the impact of errors**\r\n\r\nAs with efficiency, for minimizing the impact of errors, user initiative support should be in place, mainly mechanisms of *Cancel* and *Undo*.\r\n\r\n**Adapting the system to user needs**\r\n\r\nFor proper adaptation of user needs, basic User initiative support should be in place and for more efficient system using, System Initiative Support can be implemented. Read about suggestions down below.\r\n\r\n**Increasing confidence and satisfaction**\r\n\r\nFor proper confidence in the system, any failure or success of functionality should be reported to the user. When a drug prescription is changed, the system should inform us whether the change got through to the database or whether there was any error along the way. No failure should be left unreported. It should not be the responsibility of the hospital staff to manually check every device if it is currently properly working. Any suspicious behavior should be immediately reported to authorised problem solving personnel.\r\n\r\n#### User Initiative Support\r\n\r\n**Cancel** Cancelling an action in PMC is not needed very often. \r\n\r\n> Drug order is suddenly redundant.\r\n\r\nImagine a situation when one patient who had a drug prescribed is released to home care. The drugs are no longer needed for his treatment and can be reallocated to other patients. Suddenly a shortage of a drug is no longer in place. What more, there may be not enough space to store the incoming shipment. Therefore it is useful to be able to cancel once issued drug order.\r\n\r\n**Pause/Resume** The only functionality that may need this mechanism is the device management - of one specific device.\r\n\r\n> A patient is being moved by the medical staff.\r\n\r\nThe device on patients bed may be paused to stop it from triggering an alarm. Then it may be resumed to its previous function without long setting after manipulation with the patient is done.\r\n\r\n**Undo** Is one of two most needed activities that may be needed in the PMC system. It may be needed in a device installing or wrong drug prescription.\r\n\r\n> Doctor prescribes s new drug to a patient. Then he is warned by a system, that the drug can't be prescribed with the already prescribed drugs. \r\n\r\nThe change should be therefore undone with ease. This should be allowed by undo mechanic. Its implementation is possible because the system persists the drug prescription data.\r\n\r\n**Aggregate** Is the second of the two most needed activities that may be needed in the PMC system. Since there are many of the same or very similar entities in the system (hospital beds, drugs, patients, devices) it is mandatory to enable the users to treat them in groups. \r\n\r\n> Orthopedic wing is flooded by water due to broken water pipes. Patients need to be moved to another hospital wing. \r\n\r\nIf the capacities allow it, don't move them in the system one by one but all at once. They are all ungoing the same change.\r\n\r\n#### System Initiative Support\r\nModels which could be useful in our Patient Monitoring and Control system, but are not currently supported by specific modules:\r\n\r\n**Task model** \r\n\r\n> When receiving new patient, if diagnosis is available, recommend available hospital bed in suitable hospital wing.\r\n\r\nInstead of just filtering patients without assigned hospital bed, recommend a solution if diagnosis data are available.\r\nNo hospital wing / diagnosis recommender map is available at the moment, however if it was to be implemented, the bed database is already available so only mapping of diagnosis-hopital wings would be needed to succesfully make a suitable new module for handling this kind of recommendations.\r\n\r\n**User model**\r\n\r\n> Drug recommendation based on previous patients' diagnosis and drug prescription.\r\n\r\nIf a patient has the same diagnosis as a patient treated before him, the same drugs may be used in his treatment. Recommend the combinations to save the time and just ask for doctor's agreement. If the drugs shall be for any reason different, let the doctor prescribe custom drugs.\r\nHowever, patient history is stored in the system and if the component for recommending was to be implemented, it has the data it needs.\r\n\r\n**System model**\r\n\r\n> Show estimated time to arrival of demanded drugs.\r\n\r\nThe hospital wing may be in serious time pressing need of specific drugs (a rare case of illness/injury). If the system shows higher estimated arrival time than is acceptable, it can react by dispatching an emergency courrier to acquire them in a faster way not going through the Drug monitoring system warehouse order management. The drug package shall be then received as usual but without the delay at the supllier's side.\r\nThere is currently no way to bypass the drug management ordering process conducted by Drug management external system. It obviously should not be bypassed in most of ordinary scenarios. However if drugs were to get to hospital the unofficial way, the systems would struggle to handle them properly without their proper registration to the package system.\r\n\r\n#### Usability requirement scenarios\r\n\r\nFrom the analysis above we extracted requirement scenarios:\r\n\r\n> Medical support staff receives notification about device failure. Find out where the device is.\r\n\r\n- **Source:** Medical support staff\r\n- **Stimulus:** Device Failure Notification received\r\n- **Artifact:** Device Web API (Devices Notification Component)\r\n- **Environment:** Normal operation\r\n- **Response:** The notification/e-mail contains link to the affected device, saving the worker the need to open Device Web App manually\r\n- **Measure:** 1 click to read the failed device specification (location, brief error message)\r\n\r\nIn current system architecture, it is possible to implement this feature. Devices Management Component is able to gather data about failed device. Through the Devices Data Component it is able to load the device endpoint used in the Devices Web App. No change in the architecture is needed to implement this feature.\r\n\r\n> A new enhanced brand of drugs is operating on the market. Hospital wants to use it instead of its old corresponding drugs.\r\n\r\n- **Source:** Head nurse\r\n- **Stimulus:** Change currently used brand of drugs in all affected patients' drug prescriptions\r\n- **Artifact:** PMC Web App\r\n- **Environment:** Normal operation\r\n- **Response:** The system changes prescribed drug brand for another in all ongoing prescriptions, saving the old brand to history\r\n- **Measure:** In 1 minute without manually searching for every individual affected patient\r\n\r\nDrug Controller implements the logic related to getting patient's drug data. If it is implemented in a way that it can get more data at once, there can be a function that filters the data by a given criterion. Then it should be possible to have those filtering options implemented also in the PMC Web App. Therefore no architecture change should be neccessary.\r\n\r\n> In case of catastrophy, we need to get the number and placement of *all* available beds for incoming injured people.\r\n\r\n- **Source:** Hospital capacity manager\r\n- **Stimulus:** Search for number and placement of available beds\r\n- **Artifact:** PMC Web App\r\n- **Environment:** Normal operation\r\n- **Response:** The system gives number and placement of available beds\r\n- **Measure:** Manager is able to tell a contact person from emergency services their current bed capacity\r\n\r\nIn the specification it is stated that the patients data should be available only for the specific hospital wing staff. However, given that the system is only running once, it can be assumed that there is some implicit filtering done by the user's allocation. If we accept that a director of the hospital should be able to oversee all allocations and patients and devices in the hospital, it can be possible to make a superuser or a superuser for a specific functionality, that would return records from *all* hospital wings, not just one. So we have PMC Data Storage which has available beds configuration, the Persistance Layer above with Patient Location Controller. \r\nEither the Patient Location Controller includes overview of available hospital beds, or a new Controller must be introduced that would be providing data of available beds, and the Controller should communicate with the Patient Location Controller to provide possible allocations for patients.\r\n\r\nIf the new Hospital Bed Controller is needed, the Component Diagram for PMC Server would look like this:\r\n\r\n![](embed:Level_3_central)\r\n\r\n### Availability\r\n\r\nThe system provides multiple functionalities and not all of them are equally important\r\nfor the department's operation. Here is a short assessment of functionalities and their importance:\r\n\r\n- **Assignment of new patients to beds** Patients typically come from a different department and thus a delay of up to 1 day due to software system availability problems is acceptable.\r\n- **Viewing patient's condition** This is a typical action, performed very often. Having this functionality unavailable would severely disturb the department's operation. However, having this functionality unavailable does not directly threaten patient's health.\r\n- **Drug usage** This system is of equal importance.\r\n- **Device management** Adding, modifying or configuring bed devices usually takes couple of hours and is performed by the technical staff. A temporary outage here is not very costly.\r\n\r\n\r\n#### Internal fault tolerance\r\n\r\nThe presentation layer is implement as two web applications. These applications run in the client's browser which can be considered a robust environment. Moreover this gives the user the ability to use a different device in case of a device failure. Since there are many devices available to the department, this transitioning process is quick and has only local effects.\r\n\r\nThe business layer (PMC Server, Drugs Usage Web API, Devices Web API) are all deployed to a kubernetes cluster, each in one replica. The cluster, however, consists of only one node (Ubuntu 18.04 LTS). This is a single point of failure for the entire system and if this node goes down, so does the kubernetes control plane (which is missing in the deployment diagram). Recovering such a failure wold take couple of hours because a technician needs to (re)start the physical machine manually. A solution would be to add a second machine and have the kubernetes control plane run on both of them.\r\n\r\nThe software system containers run only in one replica each, but since they run on kubernetes, liveness probes can be setup to automatically monitor their status. Kubernetes will then restart any service that becomes unavailable. This causes couple seconds of downtime, but that is acceptable given our requirements.\r\n\r\nThe database layer is designed very well, with replication in mind. The two database instances run on different machines and they both hold the latest data. The documentation doesn't state their relationship in regards to failure, but a reasonable option is to have the database cluster perform an automatic failover.\r\n\r\n\r\n#### External fault tolerance\r\n\r\nThere are many external software systems that may fail. The following is an assessment of the impact of such a failure:\r\n\r\n- **Medical Device** Although viewing patient's condition is a primary functionality, having a single device fail does not impact the functionality of the entire system. Moreover, given the number of connected devices, having one failed is a usual event and the PMC system even incorporates functionality for reporting such failures to the department staff.\r\n- **OAuth server** This external system is relied upon by many other software systems throughout the hospital. For this reason is this system designed to be highly available and thus very unlikely to fail.\r\n- **Patient registry** An old system, prone to failure (approx. once a month for an hour). While this system may fail, our system relies on it only when accepting new patients. Since this process is already time consuming, a temporary external system failure does not slow it down substantially. For this reason we do not need to take any measures here (e.g. adding a local cache). Our system remains in a degraded state during the downtime of the patient registry.\r\n- **Drug monitoring** While this system may go down occasionally, it is only used for requesting new drugs and reporting drug depletion. Our local drug usage system already stores information about lots of different drugs and their identification numbers are compatible with the external system. Therefore both drug requests and depletion reports may be queued locally during DM downtime. This will cause the local data (drug metadata, drug list, ...) to get stale over time, but they chage so rarely that it isn't a problem.\r\n\r\nThe architecture of the *Drug Usage Web API* container needs to be slightly modified. The *Drug Catalog Manager* needs to leverage the *Persistance layer* during DM outage. The *Drug Delivery Manager* needs to queue requests via the *Persistance layer* during DM downtime and also send these requests when DM becomes available.\r\n\r\n![](embed:Level_3_drugs)\r\n\r\n\r\n#### Availability requirement scenarios\r\n\r\nFrom the analysis above we extracted requirement scenarios:\r\n\r\n> External drug monitoring system is down and someone requests drugs.\r\n\r\n- **Source:** *Drugs Usage Web API* container\r\n- **Stimulus:** Unable to connect\r\n- **Artifact:** *Drug Monitoring (DM)* external software system\r\n- **Environment:** Normal operation\r\n- **Response:** Mask fault (queue the request)\r\n- **Measure:** No downtime\r\n\r\n> Business logic container crashes, is restarted by kubernetes.\r\n\r\n- **Source:** *PMC Server* container\r\n- **Stimulus:** Unable to connect (omission)\r\n- **Artifact:** *Devices Web API* container\r\n- **Environment:** Normal operation\r\n- **Response:** Mask fault (repeat after 10s)\r\n- **Measure:** 10s downtime\r\n\r\n> Patient registry is unavailable.\r\n\r\n- **Source:** *PMC Server* container\r\n- **Stimulus:** Unable to connect (omission)\r\n- **Artifact:** *Patient registry* external software system\r\n- **Environment:** Normal operation\r\n- **Response:** Describes the problem to the user\r\n- **Measure:** Degraded state\r\n"
    }, {
      "elementId" : "4",
      "title" : "Project Description",
      "order" : 1,
      "format" : "Markdown",
      "content" : "## Project Description\r\n\r\n### Overview\r\n**Patient monitoring and control** is a software system which provides medical personnel with the means to (de)allocate patients and view patient's condition as well as the patient's history within a medical facility. All this functionality is provided to users (medical (support) personnel) via web/mobile applications.\r\n\r\nThe system integrates with and is dependent on existing physical devices (sensors) and other software systems of the medical facility. The system is a **read-only** application with the exception of device management done by the *medical support staff*, allocation of patients and prescribing drugs. This means that apart from the device management, patient allocation and drug prescription, the data is only to be viewed by the personel. Patient allocation and drug prescription is on a facility-department basis. This means that only *medical staff* from department A (further denoted as *authorized*) can modify data related to a patient situated in the department A. \r\n\r\n#### Definitions\r\n* from now on, these definitions will be used and *emphasized* wherever used\r\n\r\n**Medical staff/personnel** - a doctor or otherwise authorized person who is permitted to view and modify a treatment of a patient, belongs to a hospital department\r\n\r\n**(Medical) device** - a real-time physical device used to monitor physical properties of human body (internal processes, external phenomena, fluid analysis, ...)\r\n\r\n**Medical support staff/personnel** - a technician or otherwise authorized person who is permitted to attach and physically maintain *devices*  \r\n\r\n**Patient's condition** - a collection of the data from *devices* attached to a bed occupied by a *patient*\r\n\r\n**Patient's hospitalization history** - a collection of data spanning all the time periods the *patient* has been hospitalized in the current medical facility, includes *patient's condition* recordings, drug usage.\r\n\r\n#### Constraints & Requirements\r\n* inaccessible from the Internet, local access only\r\n* authorize *medical (support) staff* and detect new *patients* using the data provided by external software systems\r\n* allow **authorized** *medical personnel* to \r\n  * allocate a patient to a particular bed\r\n  * prescribe medication which will be automatically fetched from existing drug system\r\n  * view patient's *current condition*\r\n  * view patient's drug prescriptions\r\n  * view *patient's hospitalization history*\r\n* provide automatic *patient history* persistence and store patient-related data (*condition*, allocation, drug usage) for patient's current hospitalization\r\n* manage communication with *devices*\r\n* allow *medical support staff* to\r\n  * manage *device* allocation to a bed\r\n  * react to *device* malfunction\r\n* manage drug allocation\r\n  * request a drug package from external software systems\r\n  * report depletion of a drug package to external software systems\r\n\r\n### Role of the PMC system within the hospital network\r\nIn addition to the requirements, the system also provides *medical support staff* with notifications about device malfunction.\r\nFollowing systems are expected to be operational and reachable within the hospital network:\r\n* Drug Monitoring - takes care of drug allocation & delivery\r\n* Patient Registry - a system providing simple information for all patients hospitalized\r\n* Authorization Server\r\n* Medical Devices - see definition of *(Medical) device*\r\n\r\n![](embed:Level_1)\r\n\r\n### System Design\r\n\r\nBased on requirements, PMC software system consists of three main parts:\r\n- PMC Application\r\n- Devices Application\r\n- Drugs Usage Application\r\n\r\nMedical staff access the system via PMC Application, medical support staff manages devices via Devices Application -- users access the application via browser. Each application is designed following four-tier architecture. Structure of PMC Application is described in further details in section [PMC Core Application](#2.1), similarly Devices Application in [Devices Application](#2.2) and Drugs Usage application in [Drugs Application](#2.3). Following [Workflows section](#1.4) describes workflows in PMC software system from users and external systems perspective.\r\n\r\n![](embed:Level_2)\r\n\r\n### Workflows\r\n\r\nFollowing diagrams describes how PMC software system is utilized in workflows with medical users and external systems. It is assumed that users are already authenticated via OAuth Authorization server.\r\n\r\n#### Patient management\r\n\r\nFollowing diagram describes the process of new patient discovery. If *medical staff* wishes to see incoming patients without a bed assignment, they interact with the web application. The PMC server, which forms a proper list of desired patients, requests data about new patients from the Patient registry and filters out those, who do not have a bed assigned. Such list is then formatted and displayed by the frontend to be seen by medical staff.\r\n\r\n![](embed:SimplePatientDiscoveryWorkflow)\r\n\r\nFollowing diagram describes the workflow of assigning a patient to a bed. *Medical staff* interacts with the web application, assigning a patient to a bed. The PMC server saves this change and responds by signaling success or failure. The response is displayed as a notification or an announcement window (possibly describing an error in a non-technical way).\r\n\r\n![](embed:SimpleAddPatientWorkflow)\r\n\r\nFollowing diagram describes the workflow how the PMC system provides current *patient's condition* data. *Medical staff* requests patient condition data via the web application. The PMC system then requests the current data of the devices attached to the patient's bed. This data is interpreted and displayed to the user in the web application. \r\n\r\n![](embed:SimplePatientConditionCheckWorkflow)\r\n\r\n#### Drugs management\r\n\r\nThe following diagram describes how drugs are prescribed to a patient. *Medical staff* assigns new drugs to a patient using the web application. The *PMC server* relays this request to the *Drugs Application*, whose task is to store the data about prescriptions. If the drug is not available, the *Drugs Application* sends a request of a new delivery to the *Drug Monitoring* system.\r\n\r\n![](embed:SimpleDrugsManagementWorkflow)\r\n\r\n#### Devices management\r\n\r\nFollowing diagram describes regular workflow how PMC software system manages medical device data. Medical support staff register medical devices to hospital beds in Devices Application. PMC Application then sends periodical requests to Devices Application to fetch new devices data for each hospital bed.\r\n\r\n![](embed:SimpleDeviceAssignmentWorkflow)\r\n\r\nFollowing diagram describes workflow in case of device malfunction. In case of malfunction, medical support staff is notified via e-mail and Slack app notification. Medical support staff can view device malfunction details in Devices Application. Response to PMC Application then contains generic non-technical notification available to medical staff. \r\n\r\n![](embed:SimpleDeviceFailureWorkflow)\r\n"
    } ]
  },
  "views" : {
    "systemContextViews" : [ {
      "softwareSystemId" : "4",
      "key" : "Level_1",
      "paperSize" : "A3_Landscape",
      "dimensions" : {
        "width" : 3816,
        "height" : 2116
      },
      "enterpriseBoundaryVisible" : true,
      "elements" : [ {
        "id" : "1",
        "x" : 1683,
        "y" : 207
      }, {
        "id" : "34",
        "x" : 1658,
        "y" : 1557
      }, {
        "id" : "2",
        "x" : 300,
        "y" : 865
      }, {
        "id" : "35",
        "x" : 2420,
        "y" : 1555
      }, {
        "id" : "36",
        "x" : 2645,
        "y" : 910
      }, {
        "id" : "3",
        "x" : 2630,
        "y" : 365
      }, {
        "id" : "4",
        "x" : 1658,
        "y" : 907
      } ],
      "relationships" : [ {
        "id" : "61"
      }, {
        "id" : "37"
      }, {
        "id" : "40"
      }, {
        "id" : "42"
      }, {
        "id" : "53",
        "vertices" : [ {
          "x" : 2033,
          "y" : 1382
        } ]
      }, {
        "id" : "44"
      }, {
        "id" : "38",
        "vertices" : [ {
          "x" : 1160,
          "y" : 1270
        } ]
      }, {
        "id" : "39",
        "vertices" : [ {
          "x" : 1733,
          "y" : 1382
        } ]
      } ]
    } ],
    "containerViews" : [ {
      "softwareSystemId" : "4",
      "key" : "Level_2",
      "dimensions" : {
        "width" : 4695,
        "height" : 2575
      },
      "externalSoftwareSystemBoundariesVisible" : true,
      "elements" : [ {
        "id" : "12",
        "x" : 3225,
        "y" : 864
      }, {
        "id" : "34",
        "x" : 75,
        "y" : 1254
      }, {
        "id" : "23",
        "x" : 1706,
        "y" : 845
      }, {
        "id" : "13",
        "x" : 3225,
        "y" : 2004
      }, {
        "id" : "35",
        "x" : 855,
        "y" : 259
      }, {
        "id" : "24",
        "x" : 1710,
        "y" : 1914
      }, {
        "id" : "36",
        "x" : 2510,
        "y" : 229
      }, {
        "id" : "15",
        "x" : 1710,
        "y" : 1375
      }, {
        "id" : "26",
        "x" : 905,
        "y" : 1254
      }, {
        "id" : "1",
        "x" : 1735,
        "y" : 139
      }, {
        "id" : "2",
        "x" : 3230,
        "y" : 104
      }, {
        "id" : "3",
        "x" : 4170,
        "y" : 1354
      }, {
        "id" : "5",
        "x" : 3225,
        "y" : 1354
      }, {
        "id" : "32",
        "x" : 905,
        "y" : 1904
      } ],
      "relationships" : [ {
        "id" : "60",
        "vertices" : [ {
          "x" : 1075,
          "y" : 894
        } ]
      }, {
        "id" : "50",
        "vertices" : [ {
          "x" : 2710,
          "y" : 1404
        } ]
      }, {
        "id" : "51",
        "vertices" : [ {
          "x" : 730,
          "y" : 1549
        } ]
      }, {
        "id" : "52",
        "vertices" : [ {
          "x" : 715,
          "y" : 1289
        } ]
      }, {
        "id" : "41"
      }, {
        "id" : "54"
      }, {
        "id" : "43",
        "vertices" : [ {
          "x" : 4060,
          "y" : 844
        } ]
      }, {
        "id" : "55"
      }, {
        "id" : "45"
      }, {
        "id" : "56"
      }, {
        "id" : "57"
      }, {
        "id" : "46",
        "vertices" : [ {
          "x" : 2895,
          "y" : 1079
        } ]
      }, {
        "id" : "47"
      }, {
        "id" : "58"
      }, {
        "id" : "48",
        "vertices" : [ {
          "x" : 2510,
          "y" : 1079
        } ]
      }, {
        "id" : "59"
      }, {
        "id" : "49",
        "vertices" : [ {
          "x" : 2710,
          "y" : 1684
        } ]
      } ]
    } ],
    "componentViews" : [ {
      "key" : "Level_3_devices",
      "paperSize" : "A3_Landscape",
      "dimensions" : {
        "width" : 4961,
        "height" : 3508
      },
      "containerId" : "5",
      "externalContainerBoundariesVisible" : true,
      "elements" : [ {
        "id" : "11",
        "x" : 3280,
        "y" : 1270
      }, {
        "id" : "12",
        "x" : 1145,
        "y" : 125
      }, {
        "id" : "2",
        "x" : 2630,
        "y" : 75
      }, {
        "id" : "13",
        "x" : 2130,
        "y" : 2400
      }, {
        "id" : "3",
        "x" : 4140,
        "y" : 1275
      }, {
        "id" : "15",
        "x" : 400,
        "y" : 1300
      }, {
        "id" : "6",
        "x" : 1140,
        "y" : 1295
      }, {
        "id" : "7",
        "x" : 1875,
        "y" : 710
      }, {
        "id" : "8",
        "x" : 2085,
        "y" : 1280
      }, {
        "id" : "9",
        "x" : 2105,
        "y" : 1810
      }, {
        "id" : "10",
        "x" : 2615,
        "y" : 710
      } ],
      "relationships" : [ {
        "id" : "93"
      }, {
        "id" : "94"
      }, {
        "id" : "91"
      }, {
        "id" : "92"
      }, {
        "id" : "86"
      }, {
        "id" : "87"
      }, {
        "id" : "95"
      }, {
        "id" : "96"
      }, {
        "id" : "90"
      }, {
        "id" : "45"
      }, {
        "id" : "88"
      }, {
        "id" : "89"
      } ]
    }, {
      "key" : "Level_3_central",
      "paperSize" : "A3_Landscape",
      "dimensions" : {
        "width" : 4961,
        "height" : 3508
      },
      "containerId" : "15",
      "externalContainerBoundariesVisible" : true,
      "elements" : [ {
        "id" : "22",
        "x" : 2080,
        "y" : 1955
      }, {
        "id" : "23",
        "x" : 1585,
        "y" : 515
      }, {
        "id" : "24",
        "x" : 2070,
        "y" : 2515
      }, {
        "id" : "35",
        "x" : 3045,
        "y" : 820
      }, {
        "id" : "36",
        "x" : 2185,
        "y" : 320
      }, {
        "id" : "26",
        "x" : 755,
        "y" : 2030
      }, {
        "id" : "16",
        "x" : 2325,
        "y" : 1310
      }, {
        "id" : "17",
        "x" : 2875,
        "y" : 1955
      }, {
        "id" : "18",
        "x" : 3065,
        "y" : 1290
      }, {
        "id" : "19",
        "x" : 1830,
        "y" : 1295
      }, {
        "id" : "5",
        "x" : 3755,
        "y" : 2425
      }, {
        "id" : "20",
        "x" : 1270,
        "y" : 1310
      }, {
        "id" : "21",
        "x" : 3710,
        "y" : 1290
      } ],
      "relationships" : [ {
        "id" : "70"
      }, {
        "id" : "82"
      }, {
        "id" : "83"
      }, {
        "id" : "72"
      }, {
        "id" : "80",
        "vertices" : [ {
          "x" : 2635,
          "y" : 990
        } ]
      }, {
        "id" : "81",
        "vertices" : [ {
          "x" : 2855,
          "y" : 955
        } ]
      }, {
        "id" : "74"
      }, {
        "id" : "63"
      }, {
        "id" : "73",
        "vertices" : [ {
          "x" : 2125,
          "y" : 1805
        } ]
      }, {
        "id" : "62"
      }, {
        "id" : "84",
        "vertices" : [ {
          "x" : 1810,
          "y" : 1875
        } ]
      }, {
        "id" : "65"
      }, {
        "id" : "76"
      }, {
        "id" : "85"
      }, {
        "id" : "64"
      }, {
        "id" : "67",
        "vertices" : [ {
          "x" : 2670,
          "y" : 1745
        } ]
      }, {
        "id" : "78",
        "vertices" : [ {
          "x" : 1110,
          "y" : 460
        } ]
      }, {
        "id" : "77",
        "vertices" : [ {
          "x" : 3635,
          "y" : 665
        } ]
      }, {
        "id" : "66",
        "vertices" : [ {
          "x" : 2795,
          "y" : 1530
        } ]
      }, {
        "id" : "79",
        "vertices" : [ {
          "x" : 3875,
          "y" : 470
        } ]
      }, {
        "id" : "68"
      } ]
    }, {
      "key" : "Level_3_drugs",
      "paperSize" : "A4_Landscape",
      "dimensions" : {
        "width" : 3508,
        "height" : 2480
      },
      "containerId" : "26",
      "externalContainerBoundariesVisible" : true,
      "elements" : [ {
        "id" : "34",
        "x" : 310,
        "y" : 980
      }, {
        "id" : "15",
        "x" : 2990,
        "y" : 915
      }, {
        "id" : "27",
        "x" : 910,
        "y" : 1525
      }, {
        "id" : "28",
        "x" : 1215,
        "y" : 490
      }, {
        "id" : "29",
        "x" : 2175,
        "y" : 910
      }, {
        "id" : "30",
        "x" : 1235,
        "y" : 935
      }, {
        "id" : "31",
        "x" : 1715,
        "y" : 1535
      }, {
        "id" : "32",
        "x" : 1720,
        "y" : 2060
      } ],
      "relationships" : [ {
        "id" : "71"
      }, {
        "id" : "97"
      }, {
        "id" : "98"
      }, {
        "id" : "100"
      }, {
        "id" : "99"
      }, {
        "id" : "102"
      }, {
        "id" : "101"
      }, {
        "id" : "103"
      } ]
    } ],
    "dynamicViews" : [ {
      "description" : "Summarises how technical staff is informed about device malfunction.",
      "key" : "SimpleDeviceFailureWorkflow",
      "automaticLayout" : {
        "implementation" : "Graphviz",
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "nodeSeparation" : 300,
        "edgeSeparation" : 0,
        "vertices" : false
      },
      "elementId" : "4",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "50",
        "description" : "Requests devices data for hospital bed",
        "order" : "1",
        "response" : false
      }, {
        "id" : "41",
        "description" : "Requests device data",
        "order" : "2",
        "response" : false
      }, {
        "id" : "41",
        "description" : "Malfunction in device",
        "order" : "3",
        "response" : true
      }, {
        "id" : "49",
        "description" : "Returns generic non-technical error message",
        "order" : "4",
        "response" : false
      }, {
        "id" : "43",
        "description" : "Sends notification",
        "order" : "5",
        "response" : false
      }, {
        "id" : "45",
        "description" : "Can review malfunction details",
        "order" : "6",
        "response" : false
      } ],
      "elements" : [ {
        "id" : "12",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "3",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "15",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "5",
        "x" : 0,
        "y" : 0
      } ]
    }, {
      "description" : "Summarises how the assigning of patients works.",
      "key" : "AddPatientWorkflow",
      "paperSize" : "A4_Landscape",
      "dimensions" : {
        "width" : 2504,
        "height" : 1608
      },
      "elementId" : "15",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Assigns an unassigned patient to a bed",
        "order" : "1",
        "response" : false
      }, {
        "id" : "65",
        "description" : "Requests the assignment of a patient to a bed",
        "order" : "2",
        "response" : false,
        "vertices" : [ {
          "x" : 1790,
          "y" : 590
        } ]
      }, {
        "id" : "62",
        "description" : "Validates & writes data using",
        "order" : "3",
        "response" : false,
        "vertices" : [ {
          "x" : 1154,
          "y" : 804
        } ]
      }, {
        "id" : "62",
        "description" : "Signals success / failure",
        "order" : "4",
        "response" : true,
        "vertices" : [ {
          "x" : 1454,
          "y" : 804
        } ]
      }, {
        "id" : "140",
        "description" : "If an old patient was overwritten, trigger patient history persistance for overwritten patient",
        "order" : "5",
        "response" : false
      }, {
        "id" : "65",
        "description" : "Signals success / failure",
        "order" : "6",
        "response" : true
      } ],
      "elements" : [ {
        "id" : "22",
        "x" : 1079,
        "y" : 979
      }, {
        "id" : "1",
        "x" : 1825,
        "y" : 55
      }, {
        "id" : "23",
        "x" : 1829,
        "y" : 979
      }, {
        "id" : "16",
        "x" : 1079,
        "y" : 329
      }, {
        "id" : "19",
        "x" : 329,
        "y" : 979
      } ]
    }, {
      "description" : "Summarises how new and unassigned patients are discovered.",
      "key" : "PatientDiscoveryWorkflow",
      "paperSize" : "A4_Landscape",
      "dimensions" : {
        "width" : 2504,
        "height" : 2154
      },
      "elementId" : "15",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Displays the unassigned-patient view / page",
        "order" : "1",
        "response" : false,
        "vertices" : [ {
          "x" : 2153,
          "y" : 1362
        } ]
      }, {
        "id" : "65",
        "description" : "Requests incoming unassigned patient list",
        "order" : "2",
        "response" : false,
        "vertices" : [ {
          "x" : 1860,
          "y" : 595
        } ]
      }, {
        "id" : "64",
        "description" : "Requests new-patient list",
        "order" : "3",
        "response" : false,
        "vertices" : [ {
          "x" : 730,
          "y" : 595
        } ]
      }, {
        "id" : "63",
        "description" : "Requests patient data to determine new patients",
        "order" : "4",
        "response" : false,
        "vertices" : [ {
          "x" : 353,
          "y" : 1362
        } ]
      }, {
        "id" : "63",
        "description" : "Returns patient data",
        "order" : "5",
        "response" : true,
        "vertices" : [ {
          "x" : 653,
          "y" : 1362
        } ]
      }, {
        "id" : "64",
        "description" : "Returns incoming patient list",
        "order" : "6",
        "response" : true
      }, {
        "id" : "62",
        "description" : "Filter unassigned patients using",
        "order" : "7",
        "response" : false,
        "vertices" : [ {
          "x" : 1103,
          "y" : 737
        } ]
      }, {
        "id" : "62",
        "description" : "Returns list of filtered unassigned patients",
        "order" : "8",
        "response" : true,
        "vertices" : [ {
          "x" : 1340,
          "y" : 765
        } ]
      }, {
        "id" : "65",
        "description" : "Returns list of incoming unassigned patients",
        "order" : "9",
        "response" : true
      }, {
        "id" : "47",
        "description" : "Displays unassigned patients",
        "order" : "10",
        "response" : true,
        "vertices" : [ {
          "x" : 1853,
          "y" : 1362
        } ]
      } ],
      "elements" : [ {
        "id" : "22",
        "x" : 1015,
        "y" : 930
      }, {
        "id" : "1",
        "x" : 1803,
        "y" : 1487
      }, {
        "id" : "23",
        "x" : 1778,
        "y" : 887
      }, {
        "id" : "35",
        "x" : 278,
        "y" : 1537
      }, {
        "id" : "16",
        "x" : 1028,
        "y" : 287
      }, {
        "id" : "18",
        "x" : 278,
        "y" : 887
      } ]
    }, {
      "description" : "Summarises how the medical staff can access patient's current condition",
      "key" : "PatientConditionCheckWorkflow",
      "paperSize" : "A4_Portrait",
      "dimensions" : {
        "width" : 2454,
        "height" : 3458
      },
      "elementId" : "15",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Displays patient's condition view / page",
        "order" : "1",
        "response" : false
      }, {
        "id" : "77",
        "description" : "Requests patient's condition",
        "order" : "2",
        "response" : false
      }, {
        "id" : "83",
        "description" : "Requests patient's bed",
        "order" : "3",
        "response" : false,
        "vertices" : [ {
          "x" : 361,
          "y" : 2632
        } ]
      }, {
        "id" : "83",
        "description" : "Returns patient's bed",
        "order" : "4",
        "response" : true,
        "vertices" : [ {
          "x" : 661,
          "y" : 2632
        } ]
      }, {
        "id" : "141",
        "description" : "Requests sensor data related to patient's bed",
        "order" : "5",
        "response" : false,
        "vertices" : [ {
          "x" : 661,
          "y" : 2032
        } ]
      }, {
        "id" : "87",
        "description" : "Requests sensor data related to the bed",
        "order" : "6",
        "response" : false,
        "vertices" : [ {
          "x" : 661,
          "y" : 1407
        } ]
      }, {
        "id" : "89",
        "description" : "Request fresh device data using",
        "order" : "7",
        "response" : false,
        "vertices" : [ {
          "x" : 661,
          "y" : 757
        } ]
      }, {
        "id" : "91",
        "description" : "Fetches device data",
        "order" : "8",
        "response" : false,
        "vertices" : [ {
          "x" : 940,
          "y" : 660
        } ]
      }, {
        "id" : "91",
        "description" : "Returns device data",
        "order" : "9",
        "response" : true
      }, {
        "id" : "89",
        "description" : "Sends back sensor data",
        "order" : "10",
        "response" : true,
        "vertices" : [ {
          "x" : 361,
          "y" : 757
        } ]
      }, {
        "id" : "87",
        "description" : "Returns device data",
        "order" : "11",
        "response" : true,
        "vertices" : [ {
          "x" : 361,
          "y" : 1407
        } ]
      }, {
        "id" : "141",
        "description" : "Sends device data in response",
        "order" : "12",
        "response" : true,
        "vertices" : [ {
          "x" : 361,
          "y" : 2032
        } ]
      }, {
        "id" : "77",
        "description" : "Sends current patient condition data",
        "order" : "13",
        "response" : true,
        "vertices" : [ {
          "x" : 1165,
          "y" : 2315
        } ]
      } ],
      "elements" : [ {
        "id" : "22",
        "x" : 286,
        "y" : 2782
      }, {
        "id" : "11",
        "x" : 286,
        "y" : 282
      }, {
        "id" : "1",
        "x" : 1185,
        "y" : 1140
      }, {
        "id" : "23",
        "x" : 1155,
        "y" : 1800
      }, {
        "id" : "3",
        "x" : 1115,
        "y" : 280
      }, {
        "id" : "6",
        "x" : 286,
        "y" : 1582
      }, {
        "id" : "8",
        "x" : 286,
        "y" : 932
      }, {
        "id" : "21",
        "x" : 286,
        "y" : 2182
      } ]
    }, {
      "description" : "Summarises how medical staff allocates drugs to a patient.",
      "key" : "SimpleDrugsManagementWorkflow",
      "automaticLayout" : {
        "implementation" : "Graphviz",
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "nodeSeparation" : 300,
        "edgeSeparation" : 0,
        "vertices" : false
      },
      "elementId" : "4",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Assigns a drug to a patient",
        "order" : "1",
        "response" : false
      }, {
        "id" : "57",
        "description" : "Requests the assignment of the drug to the patient",
        "order" : "2",
        "response" : false
      }, {
        "id" : "59",
        "description" : "Relays the request of the assignment of the drug to the patient",
        "order" : "3",
        "response" : false
      }, {
        "id" : "51",
        "description" : "In case the drug is not available, requests delivery",
        "order" : "4",
        "response" : false
      } ],
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "23",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "34",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "15",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "26",
        "x" : 0,
        "y" : 0
      } ]
    }, {
      "description" : "Summarises how technical staff is informed about device malfunction.",
      "key" : "DeviceFailureWorkflow",
      "automaticLayout" : {
        "implementation" : "Graphviz",
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "nodeSeparation" : 300,
        "edgeSeparation" : 0,
        "vertices" : false
      },
      "elementId" : "5",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "89",
        "description" : "Requests data from a device",
        "order" : "1",
        "response" : false
      }, {
        "id" : "89",
        "description" : "Returns invalid data",
        "order" : "2",
        "response" : true
      }, {
        "id" : "90",
        "description" : "Requests to notify users of the failure",
        "order" : "3",
        "response" : false
      }, {
        "id" : "88",
        "description" : "Stores failure details",
        "order" : "4",
        "response" : false
      }, {
        "id" : "96",
        "description" : "Notifies of the failure",
        "order" : "5",
        "response" : false
      }, {
        "id" : "45",
        "description" : "Reviews failure details for diagnostics",
        "order" : "6",
        "response" : false
      } ],
      "elements" : [ {
        "id" : "11",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "12",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "2",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "8",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "9",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "10",
        "x" : 0,
        "y" : 0
      } ]
    }, {
      "description" : "Summarises how the assigning of patients works.",
      "key" : "SimpleAddPatientWorkflow",
      "paperSize" : "A5_Landscape",
      "dimensions" : {
        "width" : 1704,
        "height" : 1608
      },
      "elementId" : "4",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Assigns an unassigned patient to a bed",
        "order" : "1",
        "response" : false,
        "vertices" : [ {
          "x" : 1005,
          "y" : 515
        } ]
      }, {
        "id" : "57",
        "description" : "Requests the assignment of a patient to a bed",
        "order" : "2",
        "response" : false,
        "vertices" : [ {
          "x" : 361,
          "y" : 767
        } ]
      }, {
        "id" : "57",
        "description" : "Signals success/failure",
        "order" : "3",
        "response" : true,
        "vertices" : [ {
          "x" : 661,
          "y" : 767
        } ]
      }, {
        "id" : "47",
        "description" : "Signals success/failure",
        "order" : "4",
        "response" : true
      } ],
      "elements" : [ {
        "id" : "1",
        "x" : 1045,
        "y" : 710
      }, {
        "id" : "23",
        "x" : 286,
        "y" : 292
      }, {
        "id" : "15",
        "x" : 286,
        "y" : 942
      } ]
    }, {
      "description" : "Summarises how devices app is utilized with pmc application.",
      "key" : "SimpleDeviceAssignmentWorkflow",
      "paperSize" : "A4_Landscape",
      "dimensions" : {
        "width" : 3066,
        "height" : 2308
      },
      "elementId" : "4",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "142",
        "description" : "Installs device to hospital bed",
        "order" : "1",
        "response" : false
      }, {
        "id" : "45",
        "description" : "Makes request to register device for hospital bed",
        "order" : "2",
        "response" : false
      }, {
        "id" : "58",
        "description" : "Registers device for hospital bed",
        "order" : "3",
        "response" : false
      }, {
        "id" : "47",
        "description" : "Wants to see medical data for patient",
        "order" : "4",
        "response" : false
      }, {
        "id" : "57",
        "description" : "Requests data for patient",
        "order" : "5",
        "response" : false,
        "vertices" : [ {
          "x" : 1040,
          "y" : 815
        } ]
      }, {
        "id" : "50",
        "description" : "Requests devices data for bed where patient is allocated",
        "order" : "6",
        "response" : false,
        "vertices" : [ {
          "x" : 1189,
          "y" : 1556
        } ]
      }, {
        "id" : "41",
        "description" : "Requests device data for each device on bed",
        "order" : "7",
        "response" : false,
        "vertices" : [ {
          "x" : 2136,
          "y" : 1357
        } ]
      }, {
        "id" : "41",
        "description" : "Returns device data",
        "order" : "8",
        "response" : true,
        "vertices" : [ {
          "x" : 2165,
          "y" : 1645
        } ]
      }, {
        "id" : "49",
        "description" : "Returns device data",
        "order" : "9",
        "response" : false,
        "vertices" : [ {
          "x" : 1455,
          "y" : 1475
        } ]
      }, {
        "id" : "57",
        "description" : "Returns device data",
        "order" : "10",
        "response" : true,
        "vertices" : [ {
          "x" : 1282,
          "y" : 807
        } ]
      }, {
        "id" : "47",
        "description" : "User can see medical data",
        "order" : "11",
        "response" : true,
        "vertices" : [ {
          "x" : 585,
          "y" : 580
        } ]
      } ],
      "elements" : [ {
        "id" : "12",
        "x" : 1657,
        "y" : 1007
      }, {
        "id" : "1",
        "x" : 207,
        "y" : 957
      }, {
        "id" : "23",
        "x" : 907,
        "y" : 307
      }, {
        "id" : "2",
        "x" : 2374,
        "y" : 257
      }, {
        "id" : "3",
        "x" : 2407,
        "y" : 1007
      }, {
        "id" : "15",
        "x" : 907,
        "y" : 1007
      }, {
        "id" : "5",
        "x" : 1282,
        "y" : 1657
      } ]
    }, {
      "description" : "Summarises how new and unassigned patients are discovered.",
      "key" : "SimplePatientDiscoveryWorkflow",
      "automaticLayout" : {
        "implementation" : "Graphviz",
        "rankDirection" : "TopBottom",
        "rankSeparation" : 300,
        "nodeSeparation" : 300,
        "edgeSeparation" : 0,
        "vertices" : false
      },
      "elementId" : "4",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Displays the unassigned-patient view / page",
        "order" : "1",
        "response" : false
      }, {
        "id" : "57",
        "description" : "Requests incoming unassigned patient list",
        "order" : "2",
        "response" : false
      }, {
        "id" : "60",
        "description" : "Requests information to determine new patients",
        "order" : "3",
        "response" : false
      }, {
        "id" : "60",
        "description" : "Responds with the required information",
        "order" : "4",
        "response" : true
      }, {
        "id" : "57",
        "description" : "Returns list of incoming unassigned patients",
        "order" : "5",
        "response" : true
      } ],
      "elements" : [ {
        "id" : "1",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "23",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "35",
        "x" : 0,
        "y" : 0
      }, {
        "id" : "15",
        "x" : 0,
        "y" : 0
      } ]
    }, {
      "description" : "Summarises how medical staff allocates drugs to a patient.",
      "key" : "DrugsManagementWorkflow",
      "paperSize" : "A3_Portrait",
      "dimensions" : {
        "width" : 1858,
        "height" : 4416
      },
      "elementId" : "26",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Assigns a drug to a patient",
        "order" : "1",
        "response" : false
      }, {
        "id" : "74",
        "description" : "Requests the assignment of the drug to the patient",
        "order" : "2",
        "response" : false
      }, {
        "id" : "75",
        "description" : "Relays the request of the assignment of the drug to the patient",
        "order" : "3",
        "response" : false
      }, {
        "id" : "99",
        "description" : "Requests prescription of the drug to the patient",
        "order" : "4",
        "response" : false
      }, {
        "id" : "100",
        "description" : "Writes information about the prescription of the drug to the patient",
        "order" : "5",
        "response" : false,
        "vertices" : [ {
          "x" : 1149,
          "y" : 1873
        } ]
      }, {
        "id" : "100",
        "description" : "Checks the availability of the drug",
        "order" : "6",
        "response" : false,
        "vertices" : [ {
          "x" : 1449,
          "y" : 1873
        } ]
      }, {
        "id" : "102",
        "description" : "In case the drug is not available, requests delivery",
        "order" : "7",
        "response" : false
      }, {
        "id" : "103",
        "description" : "Requests delivery of the drug",
        "order" : "8",
        "response" : false
      } ],
      "elements" : [ {
        "id" : "1",
        "x" : 1120,
        "y" : 65
      }, {
        "id" : "23",
        "x" : 1095,
        "y" : 745
      }, {
        "id" : "34",
        "x" : 324,
        "y" : 2623
      }, {
        "id" : "27",
        "x" : 324,
        "y" : 2023
      }, {
        "id" : "29",
        "x" : 340,
        "y" : 1325
      }, {
        "id" : "30",
        "x" : 1074,
        "y" : 1423
      }, {
        "id" : "20",
        "x" : 315,
        "y" : 725
      }, {
        "id" : "31",
        "x" : 1074,
        "y" : 2023
      } ]
    }, {
      "description" : "Summarises how the medical staff can access patient's current condition",
      "key" : "SimplePatientConditionCheckWorkflow",
      "paperSize" : "A4_Portrait",
      "dimensions" : {
        "width" : 1704,
        "height" : 2754
      },
      "elementId" : "4",
      "externalBoundariesVisible" : true,
      "relationships" : [ {
        "id" : "47",
        "description" : "Displays patient's condition view / page",
        "order" : "1",
        "response" : false
      }, {
        "id" : "57",
        "description" : "Requests patient's condition",
        "order" : "2",
        "response" : false,
        "vertices" : [ {
          "x" : 404,
          "y" : 804
        } ]
      }, {
        "id" : "50",
        "description" : "Requests sensor data related to patient's bed",
        "order" : "3",
        "response" : false,
        "vertices" : [ {
          "x" : 404,
          "y" : 1454
        } ]
      }, {
        "id" : "41",
        "description" : "Requests device data",
        "order" : "4",
        "response" : false,
        "vertices" : [ {
          "x" : 404,
          "y" : 2079
        } ]
      }, {
        "id" : "41",
        "description" : "Returns device data",
        "order" : "5",
        "response" : true,
        "vertices" : [ {
          "x" : 704,
          "y" : 2079
        } ]
      }, {
        "id" : "49",
        "description" : "Returns device data",
        "order" : "6",
        "response" : false,
        "vertices" : [ {
          "x" : 704,
          "y" : 1454
        } ]
      }, {
        "id" : "57",
        "description" : "Returns patient's condition",
        "order" : "7",
        "response" : true,
        "vertices" : [ {
          "x" : 704,
          "y" : 804
        } ]
      }, {
        "id" : "47",
        "description" : "Displays patietn's condition",
        "order" : "8",
        "response" : true,
        "vertices" : [ {
          "x" : 1100,
          "y" : 515
        } ]
      } ],
      "elements" : [ {
        "id" : "1",
        "x" : 1195,
        "y" : 700
      }, {
        "id" : "23",
        "x" : 329,
        "y" : 329
      }, {
        "id" : "3",
        "x" : 329,
        "y" : 2229
      }, {
        "id" : "15",
        "x" : 329,
        "y" : 979
      }, {
        "id" : "5",
        "x" : 329,
        "y" : 1629
      } ]
    } ],
    "deploymentViews" : [ {
      "softwareSystemId" : "4",
      "key" : "Prod",
      "paperSize" : "A2_Portrait",
      "dimensions" : {
        "width" : 3925,
        "height" : 5283
      },
      "environment" : "Production",
      "elements" : [ {
        "id" : "130",
        "x" : 205,
        "y" : 2160
      }, {
        "id" : "132",
        "x" : 815,
        "y" : 2170
      }, {
        "id" : "110",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "111",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "134",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "112",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "135",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "113",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "136",
        "x" : 3275,
        "y" : 2155
      }, {
        "id" : "114",
        "x" : 1555,
        "y" : 1090
      }, {
        "id" : "137",
        "x" : 2785,
        "y" : 2160
      }, {
        "id" : "138",
        "x" : 2290,
        "y" : 2165
      }, {
        "id" : "116",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "117",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "118",
        "x" : 2640,
        "y" : 1110
      }, {
        "id" : "122",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "123",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "124",
        "x" : 570,
        "y" : 1085
      }, {
        "id" : "104",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "126",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "105",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "127",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "106",
        "x" : 2705,
        "y" : 325
      }, {
        "id" : "128",
        "x" : 1445,
        "y" : 2170
      }, {
        "id" : "107",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "108",
        "x" : 175,
        "y" : 175
      }, {
        "id" : "109",
        "x" : 1590,
        "y" : 270
      } ],
      "relationships" : [ {
        "id" : "119"
      }, {
        "id" : "129"
      }, {
        "id" : "131"
      }, {
        "id" : "120",
        "vertices" : [ {
          "x" : 2315,
          "y" : 1500
        } ]
      }, {
        "id" : "121",
        "vertices" : [ {
          "x" : 2290,
          "y" : 1140
        } ]
      }, {
        "id" : "133"
      }, {
        "id" : "115"
      }, {
        "id" : "139"
      }, {
        "id" : "125"
      } ]
    } ],
    "configuration" : {
      "branding" : { },
      "styles" : {
        "elements" : [ {
          "tag" : "webApp",
          "shape" : "WebBrowser"
        }, {
          "tag" : "mobileApp",
          "shape" : "MobileDevicePortrait"
        }, {
          "tag" : "Failover",
          "opacity" : 25
        } ]
      },
      "themes" : [ "https://static.structurizr.com/themes/default/theme.json" ],
      "terminology" : { },
      "lastSavedView" : "Level_3_central"
    }
  }
}